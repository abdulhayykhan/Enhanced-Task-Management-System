ðŸš€ Week 5 â€“ Analytics & Reporting (Python-only)
1. Backend Enhancements (Analytics Endpoints)

Weâ€™ll use SQL queries (aggregates) to calculate:

âœ… Total tasks (created, completed, pending)

âœ… Weekly/monthly trends (completed vs overdue)

âœ… Status breakdown (Pending, In Progress, Completed)

Update crud.py:

from sqlalchemy import func
import models

def get_analytics_overview(db):
    total = db.query(func.count(models.Task.id)).scalar()
    completed = db.query(func.count(models.Task.id)).filter(models.Task.status == "Completed").scalar()
    pending = db.query(func.count(models.Task.id)).filter(models.Task.status == "Pending").scalar()
    in_progress = db.query(func.count(models.Task.id)).filter(models.Task.status == "In Progress").scalar()
    return {
        "total": total,
        "completed": completed,
        "pending": pending,
        "in_progress": in_progress
    }

def get_weekly_trends(db):
    return db.query(
        func.strftime("%W", models.Task.due_date).label("week"),
        func.count(models.Task.id).label("count"),
        models.Task.status
    ).group_by("week", models.Task.status).all()

2. New Endpoints (main.py)
@app.get("/analytics/overview")
def analytics_overview(db: Session = Depends(get_db)):
    return crud.get_analytics_overview(db)

@app.get("/analytics")
def analytics_dashboard(request: Request, db: Session = Depends(get_db)):
    overview = crud.get_analytics_overview(db)
    trends = crud.get_weekly_trends(db)
    return templates.TemplateResponse("analytics.html", {
        "request": request,
        "overview": overview,
        "trends": trends
    })

3. Analytics Template (Jinja2 + Charts)

Weâ€™ll embed Chart.js via CDN (works inside Jinja2 templates, no React/Vue needed).

templates/analytics.html

{% extends "base.html" %}
{% block content %}
<h2>ðŸ“Š Analytics Dashboard</h2>

<!-- Overview Cards -->
<div class="row text-center mb-4">
  <div class="col bg-light p-3 border rounded">Total: {{ overview.total }}</div>
  <div class="col bg-success text-white p-3 border rounded">Completed: {{ overview.completed }}</div>
  <div class="col bg-warning p-3 border rounded">In Progress: {{ overview.in_progress }}</div>
  <div class="col bg-danger text-white p-3 border rounded">Pending: {{ overview.pending }}</div>
</div>

<!-- Status Breakdown Chart -->
<canvas id="statusChart" width="400" height="200"></canvas>

<!-- Trends Chart -->
<canvas id="trendChart" width="400" height="200" class="mt-4"></canvas>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
const statusCtx = document.getElementById('statusChart');
new Chart(statusCtx, {
    type: 'pie',
    data: {
        labels: ['Pending', 'In Progress', 'Completed'],
        datasets: [{
            data: [{{ overview.pending }}, {{ overview.in_progress }}, {{ overview.completed }}],
            backgroundColor: ['#dc3545', '#ffc107', '#28a745']
        }]
    }
});

const trendCtx = document.getElementById('trendChart');
new Chart(trendCtx, {
    type: 'line',
    data: {
        labels: [{% for t in trends %}"Week {{t.week}}",{% endfor %}],
        datasets: [{
            label: 'Completed',
            data: [{% for t in trends if t.status=='Completed' %}{{t.count}},{% endfor %}],
            borderColor: '#28a745',
            fill: false
        },{
            label: 'Pending',
            data: [{% for t in trends if t.status=='Pending' %}{{t.count}},{% endfor %}],
            borderColor: '#dc3545',
            fill: false
        }]
    }
});
</script>

{% endblock %}

4. Optimization (SQL + Performance)

Add indexes for faster queries in models.py:

from sqlalchemy import Index
Index("idx_task_status", Task.status)
Index("idx_task_due_date", Task.due_date)


Use limit & caching for large datasets (e.g., only last 3 months of trends).

âœ… Deliverables for Week 5

/analytics â†’ Dashboard page (cards + charts).

/analytics/overview â†’ JSON API summary.

Charts: Pie chart (status breakdown) + Line chart (weekly trends).

Backend optimized with indexes.